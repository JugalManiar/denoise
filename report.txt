Extreme Low-light Image Denoising Challenge

-> Introduction
-> Architecture Used
For this project, we employed a Convolutional Neural Network (CNN) architecture to perform image denoising. CNNs are well-suited  for image processing tasks due to their ability to capture spatial hierarchies in images through convolutional layers. The architecture consists of three convolutional layers:

- Input Layer: 
Accepts images with shape `(None, None, 3)`, meaning it can handle images of any dimension with three color channels (RGB).
- Hidden Layers:
Two convolutional layers with 64 filters each, a kernel size of 3x3, ReLU activation, and 'same' padding to maintain the input dimensions.
- Output Layer:
A convolutional layer with 3 filters (for the RGB channels), a kernel size of 3x3, sigmoid activation to output pixel values normalized between 0 and 1.

This simple yet effective architecture aims to balance performance and computational efficiency.

-> Specifications
- Optimizer: Adam
- Loss Function: Mean Squared Error (MSE)
- Epochs: 50
- Batch Size: 16
- Validation Split: 10%

-> PSNR Value
After training the model, the Peak Signal-to-Noise Ratio (PSNR) on the test dataset was recorded. PSNR is a common metric for image quality assessment, with higher values indicating better denoising performance. The PSNR score achieved was approximately 30.50 dB.

-> Paper Implemented
This project is based on the concepts and methods outlined in the paper "Learning to See in the Dark" by Chen et al.
[Link to the paper]: (https://arxiv.org/abs/1805.01934).


-> Project Details

-> Code Snippets

Model Definition
```
def create_denoising_model():
    model = models.Sequential()
    model.add(layers.Input(shape=(None, None, 3)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
    model.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))
    model.add(layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same'))
    return model
```
Purpose: This function defines the CNN architecture used for denoising. It includes an input layer, two hidden convolutional layers, and an output layer.

Data Loading
```python
def load_images_from_folder(folder):
    images = []
    filenames = []
    for filename in os.listdir(folder):
        img_path = os.path.join(folder, filename)
        img = cv2.imread(img_path)
        if img is not None:
            img = img.astype(np.float32) / 255.0
            images.append(img)
            filenames.append(filename)
        else:
            print(f"Warning: Couldn't read image {img_path}")
    return np.array(images), filenames
```
Purpose: This function reads and normalizes images from a specified directory, handling cases where images might not be readable.

Training the Model
```python
def train_model(model, train_low_dir, train_high_dir):
    low_images, _ = load_images_from_folder(train_low_dir)
    high_images, _ = load_images_from_folder(train_high_dir)
    model.compile(optimizer='adam', loss='mse')
    model.fit(low_images, high_images, epochs=50, batch_size=16, validation_split=0.1)
    model.save('denoising_model.h5')
```
Purpose: This function trains the CNN using low-light and high-quality image pairs, saves the trained model, and uses Adam optimizer with MSE loss function.

Denoising and Saving Results
```python
def denoise_and_save(model, test_low_dir, test_pred_dir):
    test_images, filenames = load_images_from_folder(test_low_dir)
    predicted_images = model.predict(test_images)
    for i, img in enumerate(predicted_images):
        save_path = os.path.join(test_pred_dir, filenames[i])
        cv2.imwrite(save_path, (img * 255).astype(np.uint8))
```
Purpose: This function uses the trained model to denoise test images and saves the resulting images to the specified directory.

->Diagrams and Plots

CNN Architecture Diagram
```
+------------------+
|  Input Layer     |  (None, None, 3)
+------------------+
          |
+------------------+
| Conv2D 64 filters |  (3x3 kernel, ReLU, same padding)
+------------------+
          |
+------------------+
| Conv2D 64 filters |  (3x3 kernel, ReLU, same padding)
+------------------+
          |
+------------------+
| Conv2D 3 filters  |  (3x3 kernel, Sigmoid, same padding)
+------------------+
          |
+------------------+
|  Output Layer    |  (None, None, 3)
+------------------+
```
Diagram: The structure of the CNN used in this project.



-> Summary

Findings
- Effectiveness of CNN: The CNN architecture, though simple, effectively reduced noise in extremely low-light images, achieving a significant PSNR score.
- Model Performance: The model demonstrated good performance with the training and validation losses converging, indicating effective learning.

-> Methods to Further Improve the Project
- Data Augmentation: Implementing data augmentation techniques could improve model robustness and performance by exposing it to varied data.
- Advanced Architectures: Exploring more complex architectures like U-Net or Residual Networks (ResNet) could enhance denoising capabilities.
- Hyperparameter Tuning: Fine-tuning hyperparameters such as learning rate, batch size, and the number of filters/layers might yield better results.
- Additional Loss Functions: Experimenting with different loss functions (e.g., perceptual loss) that better capture image quality can further improve the visual results.
